{"remainingRequest":"D:\\git\\Bento-BO\\UI\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\git\\Bento-BO\\UI\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\git\\Bento-BO\\UI\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\git\\Bento-BO\\UI\\src\\components\\dashboard\\merchantsearch.vue?vue&type=template&id=54bdd64a&","dependencies":[{"path":"D:\\git\\Bento-BO\\UI\\src\\components\\dashboard\\merchantsearch.vue","mtime":1591795621349},{"path":"D:\\git\\Bento-BO\\UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\git\\Bento-BO\\UI\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\git\\Bento-BO\\UI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\git\\Bento-BO\\UI\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}